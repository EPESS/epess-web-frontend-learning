/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
const documents = {
    "\nquery MeetingRoomJoinInfo ($collaborationSessionId:String!) {\n    meetingRoomJoinInfo(collaborationSessionId: $collaborationSessionId) {\n        id\n        serverUrl\n        token\n    }\n}\n": types.MeetingRoomJoinInfoDocument,
    "\n  query AvatarUrl {\n    me {\n      avatarUrl\n    }\n  }\n": types.AvatarUrlDocument,
    "\nmutation AddCollaborator ($documentId:String!,$readable:Boolean! = true, $userId:String!, $writable: Boolean! = true) {\n    addCollaborator(\n        documentId: $documentId\n        readable: $readable\n        userId: $userId\n        writable: $writable\n    ) {\n        documentId\n        readable\n        userId\n        writable\n    }\n}\n": types.AddCollaboratorDocument,
    "\nmutation RemoveCollaborator ($documentId:String!, $userId:String!) {\n    removeCollaborator(documentId: $documentId, userId: $userId) {\n        documentId\n        readable\n        userId\n        writable\n    }\n}\n": types.RemoveCollaboratorDocument,
    "\nmutation EditCollaboratorPermission ($documentId:String!,$readable:Boolean!, $userId:String!, $writable: Boolean!)  {\n    editCollaboratorPermission(\n        documentId: $documentId\n        readable: $readable\n        userId: $userId\n        writable: $writable\n    ) {\n        documentId\n        readable\n        user {\n            avatarUrl\n            bankAccountNumber\n            bankBin\n            banned\n            createdAt\n            email\n            id\n            name\n            phoneNumber\n            role\n            updatedAt\n        }\n        writable\n    }\n}\n": types.EditCollaboratorPermissionDocument,
    "\nmutation CreateSelfDocument  {\n    createDocument{\n        createdAt\n        fileUrl\n        id\n        isPublic\n        name\n        owner {\n            avatarUrl\n            bankAccountNumber\n            bankBin\n            banned\n            createdAt\n            email\n            id\n            name\n            phoneNumber\n        }\n        updatedAt\n    }\n}\n": types.CreateSelfDocumentDocument,
    "\nmutation CreateDocument ($collaborationSessionId: String) {\n    createDocument(input: { collaborationSessionId: $collaborationSessionId }) {\n        createdAt\n        fileUrl\n        id\n        isPublic\n        name\n        updatedAt\n        owner {\n            avatarUrl\n            bankAccountNumber\n            bankBin\n            banned\n            createdAt\n            email\n            id\n            name\n            phoneNumber\n        }\n    }\n}\n": types.CreateDocumentDocument,
    "\nquery EventDocumentClientRequestSync ($documentId:String!,$pageIndex:Int!) {\n    eventDocumentClientRequestSync(\n        documentId: $documentId\n        pageIndex: $pageIndex\n    ) {\n        delta\n        documentId\n        eventType\n        pageIndex\n        requestSync\n        senderId\n        totalPage\n    }\n}\n": types.EventDocumentClientRequestSyncDocument,
    "\nquery EventDocumentClientRequestSyncClass ($documentId:String!,$pageIndex:Int!) {\n    eventDocumentClientRequestSync(\n        documentId: $documentId\n        pageIndex: $pageIndex\n    ) {\n        delta\n        documentId\n        eventType\n        pageIndex\n        requestSync\n        senderId\n        totalPage\n    }\n}\n": types.EventDocumentClientRequestSyncClassDocument,
    "\n  mutation EventDocumentServerRequestSync(\n    $delta: Delta\n    $documentId: String\n    $pageIndex: Int\n    $cursor: CursorInput\n  ) {\n    eventDocumentServerRequestSync(\n      data: {\n        delta: $delta\n        documentId: $documentId\n        pageIndex: $pageIndex\n        cursor: $cursor\n      }\n    ) {\n      delta\n      documentId\n      cursor {\n        color\n        id\n        name\n        range {\n          index\n          length\n        }\n      }\n      eventType\n      pageIndex\n      requestSync\n      senderId\n      totalPage\n    }\n  }\n": types.EventDocumentServerRequestSyncDocument,
    "\nquery MyDocuments ($skip:Int, $take:Int) {\n    myDocuments(skip: $skip, take: $take, orderBy: [{updatedAt: Desc}]) {\n        createdAt\n        fileUrl\n        id\n        isPublic\n        name\n        previewImage {\n            actualFileName\n            fileName\n            fileType\n            fileUrl\n            id\n            uploadedAt\n            userId\n        }\n        owner {\n            avatarUrl\n            bankAccountNumber\n            bankBin\n            banned\n            createdAt\n            email\n            id\n            name\n            phoneNumber\n        }\n        updatedAt\n    }\n}\n": types.MyDocumentsDocument,
    "\nquery Document ($id:String) {\n    document(where: { id: $id }) {\n        createdAt\n        fileUrl\n        id\n        isPublic\n        name\n        previewImage {\n            actualFileName\n            fileName\n            fileType\n            fileUrl\n            id\n            uploadedAt\n            userId\n        }\n        owner {\n            avatarUrl\n            bankAccountNumber\n            bankBin\n            banned\n            createdAt\n            email\n            id\n            name\n            phoneNumber\n        }\n        updatedAt\n        collaborators {\n            documentId\n            readable\n            writable\n            user {\n                avatarUrl\n                email\n                id\n                name\n            }\n        }\n    }\n}\n": types.DocumentDocument,
    "\nmutation UpdateActiveDocumentId ($activeDocumentId:String!, $collaborationSessionId:String!) {\n    updateActiveDocumentId(activeDocumentId: $activeDocumentId, collaborationSessionId:  $collaborationSessionId) {\n        activeDocumentId\n        chatRoomId\n        createdAt\n        id\n        updatedAt\n    }\n}\n": types.UpdateActiveDocumentIdDocument,
    "\nmutation UpdateDocument ($documentId:String!, $name:String) {\n    updateDocument(\n        data: { name: $name }\n        documentId: $documentId\n    ) {\n        createdAt\n        fileUrl\n        id\n        isPublic\n        name\n        owner {\n            avatarUrl\n            bankAccountNumber\n            bankBin\n            banned\n            createdAt\n            email\n            id\n            name\n            phoneNumber\n        }\n        updatedAt\n    }\n}\n": types.UpdateDocumentDocument,
    "\n  mutation UpdateDocumentPreviewImage($documentId: String!, $imageId: String!) {\n    updateDocumentPreviewImage(documentId: $documentId, imageId: $imageId) {\n      fileUrl\n      id\n      previewImage {\n        actualFileName\n        fileName\n        fileType\n        fileUrl\n        id\n        uploadedAt\n      }\n    }\n  }\n": types.UpdateDocumentPreviewImageDocument,
    "\n  mutation UploadPreviewImgDoc($file: Upload!, $userId: String!) {\n    singleUpload(file: $file, fileType: IMAGE, userId: $userId) {\n      id\n    }\n  }\n": types.UploadPreviewImgDocDocument,
    "\nquery UploadedFile ($fileName: String) {\n    uploadedFile(where: { fileName: $fileName }) {\n        actualFileName\n        fileName\n        fileType\n        fileUrl\n        id\n        uploadedAt\n        userId\n    }\n}\n": types.UploadedFileDocument,
    "\nmutation SingleUpload ($file:Upload!,$userId:String!,$fileType:UploadedFileType! = IMAGE) {\n    singleUpload(file: $file, fileType: $fileType, userId: $userId) {\n        actualFileName\n        fileName\n        fileType\n        fileUrl\n        id\n        uploadedAt\n        userId\n    }\n}\n": types.SingleUploadDocument,
    "\n  query InterviewJoinInfo($scheduleId: String!) {\n    interviewJoinInfo(scheduleId: $scheduleId) {\n      id\n      serverUrl\n      token\n    }\n  }\n": types.InterviewJoinInfoDocument,
    "\nquery MeetingRoom ($scheduleDateId:String!) {\n    meetingRoom(scheduleDateId: $scheduleDateId) {\n        collaborationSessionId\n        createdAt\n        id\n        updatedAt\n        collaborators {\n            id\n            meetingRoomId\n            userId\n            user {\n                avatarUrl\n                bankAccountNumber\n                bankBin\n                createdAt\n                email\n                id\n                name\n                phoneNumber\n                role\n                updatedAt\n            }\n        }\n    }\n}\n": types.MeetingRoomDocument,
    "\nquery Messages($chatRoomId: String, $skip: Int, $take: Int) {\n    messages(\n        filter: { chatRoomId: { equals: $chatRoomId } }\n        skip: $skip\n        take: $take\n        orderBy: [{sentAt:Desc}]\n    ) {\n        chatRoomId\n        content\n        id\n        senderId\n        sentAt\n        type\n        sender {\n            avatarUrl\n            id\n            name\n        }\n        chatRoom {\n            mentor {\n                avatarUrl\n                name\n            }\n        }\n    }\n}\n": types.MessagesDocument,
    "\nmutation SendMessage ($chatRoomId:String,$content:String!,$type: MessageType! = TEXT) {\n    sendMessage(\n        input: {\n            chatRoom: { connect: { id: $chatRoomId } }\n            content: $content\n            type: $type\n        }\n    ) {\n        id\n        content\n    }\n}": types.SendMessageDocument,
    "\nquery Quizzes($serviceId: String!, $scheduleId: String) {\n  quizzes(serviceId: $serviceId, scheduleId: $scheduleId) {\n    nrOfQuestions\n    progressBarColor\n    questions {\n      answerSelectionType\n      answers\n      correctAnswer {\n        ... on StringListType {\n          items\n        }\n        ... on StringType {\n          value\n        }\n      }\n      explanation\n      messageForCorrectAnswer\n      messageForIncorrectAnswer\n      point\n      question\n      questionType\n    }\n    quizSynopsis\n    quizTitle\n    id\n  }\n}": types.QuizzesDocument,
    "\nquery QuizAttempt ($id:String!) {\n    quizAttempt(id: $id) {\n        correctPoints\n        numberOfCorrectAnswers\n        numberOfIncorrectAnswers\n        numberOfQuestions\n        questions    \n        totalPoints\n        userInput\n    }\n}": types.QuizAttemptDocument,
    "\nquery QuizAttempts {\n    quizAttempts {\n        correctPoints\n        createdAt\n        id\n        numberOfCorrectAnswers\n        numberOfIncorrectAnswers\n        numberOfQuestions\n        questions\n        quizId\n        totalPoints\n        updatedAt\n        userId\n        userInput\n        quiz {\n            quizTitle\n        }\n        user {\n            name\n        }\n    }\n}": types.QuizAttemptsDocument,
    "\nmutation SubmitQuiz (\n        $correctPoints: Int\n        $numberOfCorrectAnswers: Int\n        $numberOfIncorrectAnswers: Int\n        $numberOfQuestions: Int\n        $questions: [Json!]\n        $totalPoints: Int\n        $userInput: [Json!]\n        $quizId:String\n        $scheduleId:String\n    )\n     {\n  submitQuiz(\n    data: {\n      correctPoints:  $correctPoints\n      numberOfCorrectAnswers: $numberOfCorrectAnswers\n      numberOfIncorrectAnswers: $numberOfIncorrectAnswers\n      numberOfQuestions: $numberOfQuestions\n      questions: $questions\n      totalPoints: $totalPoints\n      userInput: $userInput\n      schedule: {\n        connect: {\n          id: $scheduleId\n        }\n      },\n      quiz: { connect: { id: $quizId } }\n    }\n  ) {\n    correctPoints\n    createdAt\n    id\n    numberOfCorrectAnswers\n    numberOfIncorrectAnswers\n    numberOfQuestions\n    questions\n    quizId\n    totalPoints\n    updatedAt\n    userId\n    userInput\n  }\n}\n": types.SubmitQuizDocument,
    "\n            subscription CollaborationSessionUpdated ($collaborationSessionUpdated: String!) {\n        collaborationSessionUpdated(\n            collaborationSessionId: $collaborationSessionUpdated\n        ) {\n            activeDocumentId\n            chatRoomId\n            createdAt\n            id\n            updatedAt\n            activeDocument {\n                createdAt\n                fileUrl\n                id\n                isPublic\n                name\n                owner {\n                    avatarUrl\n                    bankAccountNumber\n                    bankBin\n                    banned\n                    createdAt\n                    email\n                    id\n                    name\n                    phoneNumber\n                }\n                updatedAt\n            }\n        }\n    }": types.CollaborationSessionUpdatedDocument,
    "\nquery CollaborationSession ($scheduleDateId: String!) {\n    collaborationSession(scheduleDateId: $scheduleDateId) {\n        activeDocumentId\n        chatRoomId\n        createdAt\n        id\n        updatedAt\n        collaboratorsIds\n        activeDocument {\n            createdAt\n            fileUrl\n            id\n            isPublic\n            name\n            owner {\n                avatarUrl\n                bankAccountNumber\n                bankBin\n                banned\n                createdAt\n                email\n                id\n                name\n                phoneNumber\n            }\n            updatedAt\n        }\n    }\n}\n": types.CollaborationSessionDocument,
    "\nquery Users ($name:String) {\n    users(filter: { banned: { equals: false }, email: { contains: $name } }) {\n        avatarUrl\n        email\n        id\n        name\n    }\n}\n\n": types.UsersDocument,
    "\n  query WorkshopMeetingRoomJoinInfo($workshopId: String!) {\n    workshopMeetingRoomJoinInfo(workshopId: $workshopId) {\n      id\n      serverUrl\n      token\n      chatRoomId\n    }\n  }\n": types.WorkshopMeetingRoomJoinInfoDocument,
    "\n          mutation EventDocumentChanged($data: DocumentDeltaInput!) {\n            eventDocumentChanged(data: $data) {\n              delta\n              documentId\n              pageIndex\n              cursor {\n                color\n                id\n                name\n                range {\n                  index\n                  length\n                }\n              }\n            }\n          }\n        ": types.EventDocumentChangedDocument,
    "\n        subscription subscribeDocument($documentId: String!) {\n          document(documentId: $documentId) {\n            senderId\n            requestSync\n            delta\n            eventType\n            documentId\n            pageIndex\n            cursor {\n              color\n              id\n              name\n              range {\n                index\n                length\n              }\n            }\n          }\n        }\n      ": types.SubscribeDocumentDocument,
    "\n                subscription MessageSent ($chatRoomId: String!) {\n                    messageSent(chatRoomId: $chatRoomId)  {\n                        chatRoomId\n                        content\n                        id\n                        senderId\n                        sentAt\n                        type\n                        sender {\n                            avatarUrl\n                            id\n                            name\n                        }\n                        chatRoom {\n                            mentor {\n                                avatarUrl\n                                name\n                            }\n                        }\n                    }\n                }": types.MessageSentDocument,
    "\n  query Me {\n    me {\n      avatarUrl\n      bankAccountNumber\n      bankBin\n      createdAt\n      email\n      id\n      name\n      phoneNumber\n      role\n      updatedAt\n    }\n  }\n": types.MeDocument,
};

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = gql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function gql(source: string): unknown;

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery MeetingRoomJoinInfo ($collaborationSessionId:String!) {\n    meetingRoomJoinInfo(collaborationSessionId: $collaborationSessionId) {\n        id\n        serverUrl\n        token\n    }\n}\n"): (typeof documents)["\nquery MeetingRoomJoinInfo ($collaborationSessionId:String!) {\n    meetingRoomJoinInfo(collaborationSessionId: $collaborationSessionId) {\n        id\n        serverUrl\n        token\n    }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query AvatarUrl {\n    me {\n      avatarUrl\n    }\n  }\n"): (typeof documents)["\n  query AvatarUrl {\n    me {\n      avatarUrl\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nmutation AddCollaborator ($documentId:String!,$readable:Boolean! = true, $userId:String!, $writable: Boolean! = true) {\n    addCollaborator(\n        documentId: $documentId\n        readable: $readable\n        userId: $userId\n        writable: $writable\n    ) {\n        documentId\n        readable\n        userId\n        writable\n    }\n}\n"): (typeof documents)["\nmutation AddCollaborator ($documentId:String!,$readable:Boolean! = true, $userId:String!, $writable: Boolean! = true) {\n    addCollaborator(\n        documentId: $documentId\n        readable: $readable\n        userId: $userId\n        writable: $writable\n    ) {\n        documentId\n        readable\n        userId\n        writable\n    }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nmutation RemoveCollaborator ($documentId:String!, $userId:String!) {\n    removeCollaborator(documentId: $documentId, userId: $userId) {\n        documentId\n        readable\n        userId\n        writable\n    }\n}\n"): (typeof documents)["\nmutation RemoveCollaborator ($documentId:String!, $userId:String!) {\n    removeCollaborator(documentId: $documentId, userId: $userId) {\n        documentId\n        readable\n        userId\n        writable\n    }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nmutation EditCollaboratorPermission ($documentId:String!,$readable:Boolean!, $userId:String!, $writable: Boolean!)  {\n    editCollaboratorPermission(\n        documentId: $documentId\n        readable: $readable\n        userId: $userId\n        writable: $writable\n    ) {\n        documentId\n        readable\n        user {\n            avatarUrl\n            bankAccountNumber\n            bankBin\n            banned\n            createdAt\n            email\n            id\n            name\n            phoneNumber\n            role\n            updatedAt\n        }\n        writable\n    }\n}\n"): (typeof documents)["\nmutation EditCollaboratorPermission ($documentId:String!,$readable:Boolean!, $userId:String!, $writable: Boolean!)  {\n    editCollaboratorPermission(\n        documentId: $documentId\n        readable: $readable\n        userId: $userId\n        writable: $writable\n    ) {\n        documentId\n        readable\n        user {\n            avatarUrl\n            bankAccountNumber\n            bankBin\n            banned\n            createdAt\n            email\n            id\n            name\n            phoneNumber\n            role\n            updatedAt\n        }\n        writable\n    }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nmutation CreateSelfDocument  {\n    createDocument{\n        createdAt\n        fileUrl\n        id\n        isPublic\n        name\n        owner {\n            avatarUrl\n            bankAccountNumber\n            bankBin\n            banned\n            createdAt\n            email\n            id\n            name\n            phoneNumber\n        }\n        updatedAt\n    }\n}\n"): (typeof documents)["\nmutation CreateSelfDocument  {\n    createDocument{\n        createdAt\n        fileUrl\n        id\n        isPublic\n        name\n        owner {\n            avatarUrl\n            bankAccountNumber\n            bankBin\n            banned\n            createdAt\n            email\n            id\n            name\n            phoneNumber\n        }\n        updatedAt\n    }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nmutation CreateDocument ($collaborationSessionId: String) {\n    createDocument(input: { collaborationSessionId: $collaborationSessionId }) {\n        createdAt\n        fileUrl\n        id\n        isPublic\n        name\n        updatedAt\n        owner {\n            avatarUrl\n            bankAccountNumber\n            bankBin\n            banned\n            createdAt\n            email\n            id\n            name\n            phoneNumber\n        }\n    }\n}\n"): (typeof documents)["\nmutation CreateDocument ($collaborationSessionId: String) {\n    createDocument(input: { collaborationSessionId: $collaborationSessionId }) {\n        createdAt\n        fileUrl\n        id\n        isPublic\n        name\n        updatedAt\n        owner {\n            avatarUrl\n            bankAccountNumber\n            bankBin\n            banned\n            createdAt\n            email\n            id\n            name\n            phoneNumber\n        }\n    }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery EventDocumentClientRequestSync ($documentId:String!,$pageIndex:Int!) {\n    eventDocumentClientRequestSync(\n        documentId: $documentId\n        pageIndex: $pageIndex\n    ) {\n        delta\n        documentId\n        eventType\n        pageIndex\n        requestSync\n        senderId\n        totalPage\n    }\n}\n"): (typeof documents)["\nquery EventDocumentClientRequestSync ($documentId:String!,$pageIndex:Int!) {\n    eventDocumentClientRequestSync(\n        documentId: $documentId\n        pageIndex: $pageIndex\n    ) {\n        delta\n        documentId\n        eventType\n        pageIndex\n        requestSync\n        senderId\n        totalPage\n    }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery EventDocumentClientRequestSyncClass ($documentId:String!,$pageIndex:Int!) {\n    eventDocumentClientRequestSync(\n        documentId: $documentId\n        pageIndex: $pageIndex\n    ) {\n        delta\n        documentId\n        eventType\n        pageIndex\n        requestSync\n        senderId\n        totalPage\n    }\n}\n"): (typeof documents)["\nquery EventDocumentClientRequestSyncClass ($documentId:String!,$pageIndex:Int!) {\n    eventDocumentClientRequestSync(\n        documentId: $documentId\n        pageIndex: $pageIndex\n    ) {\n        delta\n        documentId\n        eventType\n        pageIndex\n        requestSync\n        senderId\n        totalPage\n    }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation EventDocumentServerRequestSync(\n    $delta: Delta\n    $documentId: String\n    $pageIndex: Int\n    $cursor: CursorInput\n  ) {\n    eventDocumentServerRequestSync(\n      data: {\n        delta: $delta\n        documentId: $documentId\n        pageIndex: $pageIndex\n        cursor: $cursor\n      }\n    ) {\n      delta\n      documentId\n      cursor {\n        color\n        id\n        name\n        range {\n          index\n          length\n        }\n      }\n      eventType\n      pageIndex\n      requestSync\n      senderId\n      totalPage\n    }\n  }\n"): (typeof documents)["\n  mutation EventDocumentServerRequestSync(\n    $delta: Delta\n    $documentId: String\n    $pageIndex: Int\n    $cursor: CursorInput\n  ) {\n    eventDocumentServerRequestSync(\n      data: {\n        delta: $delta\n        documentId: $documentId\n        pageIndex: $pageIndex\n        cursor: $cursor\n      }\n    ) {\n      delta\n      documentId\n      cursor {\n        color\n        id\n        name\n        range {\n          index\n          length\n        }\n      }\n      eventType\n      pageIndex\n      requestSync\n      senderId\n      totalPage\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery MyDocuments ($skip:Int, $take:Int) {\n    myDocuments(skip: $skip, take: $take, orderBy: [{updatedAt: Desc}]) {\n        createdAt\n        fileUrl\n        id\n        isPublic\n        name\n        previewImage {\n            actualFileName\n            fileName\n            fileType\n            fileUrl\n            id\n            uploadedAt\n            userId\n        }\n        owner {\n            avatarUrl\n            bankAccountNumber\n            bankBin\n            banned\n            createdAt\n            email\n            id\n            name\n            phoneNumber\n        }\n        updatedAt\n    }\n}\n"): (typeof documents)["\nquery MyDocuments ($skip:Int, $take:Int) {\n    myDocuments(skip: $skip, take: $take, orderBy: [{updatedAt: Desc}]) {\n        createdAt\n        fileUrl\n        id\n        isPublic\n        name\n        previewImage {\n            actualFileName\n            fileName\n            fileType\n            fileUrl\n            id\n            uploadedAt\n            userId\n        }\n        owner {\n            avatarUrl\n            bankAccountNumber\n            bankBin\n            banned\n            createdAt\n            email\n            id\n            name\n            phoneNumber\n        }\n        updatedAt\n    }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery Document ($id:String) {\n    document(where: { id: $id }) {\n        createdAt\n        fileUrl\n        id\n        isPublic\n        name\n        previewImage {\n            actualFileName\n            fileName\n            fileType\n            fileUrl\n            id\n            uploadedAt\n            userId\n        }\n        owner {\n            avatarUrl\n            bankAccountNumber\n            bankBin\n            banned\n            createdAt\n            email\n            id\n            name\n            phoneNumber\n        }\n        updatedAt\n        collaborators {\n            documentId\n            readable\n            writable\n            user {\n                avatarUrl\n                email\n                id\n                name\n            }\n        }\n    }\n}\n"): (typeof documents)["\nquery Document ($id:String) {\n    document(where: { id: $id }) {\n        createdAt\n        fileUrl\n        id\n        isPublic\n        name\n        previewImage {\n            actualFileName\n            fileName\n            fileType\n            fileUrl\n            id\n            uploadedAt\n            userId\n        }\n        owner {\n            avatarUrl\n            bankAccountNumber\n            bankBin\n            banned\n            createdAt\n            email\n            id\n            name\n            phoneNumber\n        }\n        updatedAt\n        collaborators {\n            documentId\n            readable\n            writable\n            user {\n                avatarUrl\n                email\n                id\n                name\n            }\n        }\n    }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nmutation UpdateActiveDocumentId ($activeDocumentId:String!, $collaborationSessionId:String!) {\n    updateActiveDocumentId(activeDocumentId: $activeDocumentId, collaborationSessionId:  $collaborationSessionId) {\n        activeDocumentId\n        chatRoomId\n        createdAt\n        id\n        updatedAt\n    }\n}\n"): (typeof documents)["\nmutation UpdateActiveDocumentId ($activeDocumentId:String!, $collaborationSessionId:String!) {\n    updateActiveDocumentId(activeDocumentId: $activeDocumentId, collaborationSessionId:  $collaborationSessionId) {\n        activeDocumentId\n        chatRoomId\n        createdAt\n        id\n        updatedAt\n    }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nmutation UpdateDocument ($documentId:String!, $name:String) {\n    updateDocument(\n        data: { name: $name }\n        documentId: $documentId\n    ) {\n        createdAt\n        fileUrl\n        id\n        isPublic\n        name\n        owner {\n            avatarUrl\n            bankAccountNumber\n            bankBin\n            banned\n            createdAt\n            email\n            id\n            name\n            phoneNumber\n        }\n        updatedAt\n    }\n}\n"): (typeof documents)["\nmutation UpdateDocument ($documentId:String!, $name:String) {\n    updateDocument(\n        data: { name: $name }\n        documentId: $documentId\n    ) {\n        createdAt\n        fileUrl\n        id\n        isPublic\n        name\n        owner {\n            avatarUrl\n            bankAccountNumber\n            bankBin\n            banned\n            createdAt\n            email\n            id\n            name\n            phoneNumber\n        }\n        updatedAt\n    }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation UpdateDocumentPreviewImage($documentId: String!, $imageId: String!) {\n    updateDocumentPreviewImage(documentId: $documentId, imageId: $imageId) {\n      fileUrl\n      id\n      previewImage {\n        actualFileName\n        fileName\n        fileType\n        fileUrl\n        id\n        uploadedAt\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateDocumentPreviewImage($documentId: String!, $imageId: String!) {\n    updateDocumentPreviewImage(documentId: $documentId, imageId: $imageId) {\n      fileUrl\n      id\n      previewImage {\n        actualFileName\n        fileName\n        fileType\n        fileUrl\n        id\n        uploadedAt\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation UploadPreviewImgDoc($file: Upload!, $userId: String!) {\n    singleUpload(file: $file, fileType: IMAGE, userId: $userId) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation UploadPreviewImgDoc($file: Upload!, $userId: String!) {\n    singleUpload(file: $file, fileType: IMAGE, userId: $userId) {\n      id\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery UploadedFile ($fileName: String) {\n    uploadedFile(where: { fileName: $fileName }) {\n        actualFileName\n        fileName\n        fileType\n        fileUrl\n        id\n        uploadedAt\n        userId\n    }\n}\n"): (typeof documents)["\nquery UploadedFile ($fileName: String) {\n    uploadedFile(where: { fileName: $fileName }) {\n        actualFileName\n        fileName\n        fileType\n        fileUrl\n        id\n        uploadedAt\n        userId\n    }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nmutation SingleUpload ($file:Upload!,$userId:String!,$fileType:UploadedFileType! = IMAGE) {\n    singleUpload(file: $file, fileType: $fileType, userId: $userId) {\n        actualFileName\n        fileName\n        fileType\n        fileUrl\n        id\n        uploadedAt\n        userId\n    }\n}\n"): (typeof documents)["\nmutation SingleUpload ($file:Upload!,$userId:String!,$fileType:UploadedFileType! = IMAGE) {\n    singleUpload(file: $file, fileType: $fileType, userId: $userId) {\n        actualFileName\n        fileName\n        fileType\n        fileUrl\n        id\n        uploadedAt\n        userId\n    }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query InterviewJoinInfo($scheduleId: String!) {\n    interviewJoinInfo(scheduleId: $scheduleId) {\n      id\n      serverUrl\n      token\n    }\n  }\n"): (typeof documents)["\n  query InterviewJoinInfo($scheduleId: String!) {\n    interviewJoinInfo(scheduleId: $scheduleId) {\n      id\n      serverUrl\n      token\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery MeetingRoom ($scheduleDateId:String!) {\n    meetingRoom(scheduleDateId: $scheduleDateId) {\n        collaborationSessionId\n        createdAt\n        id\n        updatedAt\n        collaborators {\n            id\n            meetingRoomId\n            userId\n            user {\n                avatarUrl\n                bankAccountNumber\n                bankBin\n                createdAt\n                email\n                id\n                name\n                phoneNumber\n                role\n                updatedAt\n            }\n        }\n    }\n}\n"): (typeof documents)["\nquery MeetingRoom ($scheduleDateId:String!) {\n    meetingRoom(scheduleDateId: $scheduleDateId) {\n        collaborationSessionId\n        createdAt\n        id\n        updatedAt\n        collaborators {\n            id\n            meetingRoomId\n            userId\n            user {\n                avatarUrl\n                bankAccountNumber\n                bankBin\n                createdAt\n                email\n                id\n                name\n                phoneNumber\n                role\n                updatedAt\n            }\n        }\n    }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery Messages($chatRoomId: String, $skip: Int, $take: Int) {\n    messages(\n        filter: { chatRoomId: { equals: $chatRoomId } }\n        skip: $skip\n        take: $take\n        orderBy: [{sentAt:Desc}]\n    ) {\n        chatRoomId\n        content\n        id\n        senderId\n        sentAt\n        type\n        sender {\n            avatarUrl\n            id\n            name\n        }\n        chatRoom {\n            mentor {\n                avatarUrl\n                name\n            }\n        }\n    }\n}\n"): (typeof documents)["\nquery Messages($chatRoomId: String, $skip: Int, $take: Int) {\n    messages(\n        filter: { chatRoomId: { equals: $chatRoomId } }\n        skip: $skip\n        take: $take\n        orderBy: [{sentAt:Desc}]\n    ) {\n        chatRoomId\n        content\n        id\n        senderId\n        sentAt\n        type\n        sender {\n            avatarUrl\n            id\n            name\n        }\n        chatRoom {\n            mentor {\n                avatarUrl\n                name\n            }\n        }\n    }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nmutation SendMessage ($chatRoomId:String,$content:String!,$type: MessageType! = TEXT) {\n    sendMessage(\n        input: {\n            chatRoom: { connect: { id: $chatRoomId } }\n            content: $content\n            type: $type\n        }\n    ) {\n        id\n        content\n    }\n}"): (typeof documents)["\nmutation SendMessage ($chatRoomId:String,$content:String!,$type: MessageType! = TEXT) {\n    sendMessage(\n        input: {\n            chatRoom: { connect: { id: $chatRoomId } }\n            content: $content\n            type: $type\n        }\n    ) {\n        id\n        content\n    }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery Quizzes($serviceId: String!, $scheduleId: String) {\n  quizzes(serviceId: $serviceId, scheduleId: $scheduleId) {\n    nrOfQuestions\n    progressBarColor\n    questions {\n      answerSelectionType\n      answers\n      correctAnswer {\n        ... on StringListType {\n          items\n        }\n        ... on StringType {\n          value\n        }\n      }\n      explanation\n      messageForCorrectAnswer\n      messageForIncorrectAnswer\n      point\n      question\n      questionType\n    }\n    quizSynopsis\n    quizTitle\n    id\n  }\n}"): (typeof documents)["\nquery Quizzes($serviceId: String!, $scheduleId: String) {\n  quizzes(serviceId: $serviceId, scheduleId: $scheduleId) {\n    nrOfQuestions\n    progressBarColor\n    questions {\n      answerSelectionType\n      answers\n      correctAnswer {\n        ... on StringListType {\n          items\n        }\n        ... on StringType {\n          value\n        }\n      }\n      explanation\n      messageForCorrectAnswer\n      messageForIncorrectAnswer\n      point\n      question\n      questionType\n    }\n    quizSynopsis\n    quizTitle\n    id\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery QuizAttempt ($id:String!) {\n    quizAttempt(id: $id) {\n        correctPoints\n        numberOfCorrectAnswers\n        numberOfIncorrectAnswers\n        numberOfQuestions\n        questions    \n        totalPoints\n        userInput\n    }\n}"): (typeof documents)["\nquery QuizAttempt ($id:String!) {\n    quizAttempt(id: $id) {\n        correctPoints\n        numberOfCorrectAnswers\n        numberOfIncorrectAnswers\n        numberOfQuestions\n        questions    \n        totalPoints\n        userInput\n    }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery QuizAttempts {\n    quizAttempts {\n        correctPoints\n        createdAt\n        id\n        numberOfCorrectAnswers\n        numberOfIncorrectAnswers\n        numberOfQuestions\n        questions\n        quizId\n        totalPoints\n        updatedAt\n        userId\n        userInput\n        quiz {\n            quizTitle\n        }\n        user {\n            name\n        }\n    }\n}"): (typeof documents)["\nquery QuizAttempts {\n    quizAttempts {\n        correctPoints\n        createdAt\n        id\n        numberOfCorrectAnswers\n        numberOfIncorrectAnswers\n        numberOfQuestions\n        questions\n        quizId\n        totalPoints\n        updatedAt\n        userId\n        userInput\n        quiz {\n            quizTitle\n        }\n        user {\n            name\n        }\n    }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nmutation SubmitQuiz (\n        $correctPoints: Int\n        $numberOfCorrectAnswers: Int\n        $numberOfIncorrectAnswers: Int\n        $numberOfQuestions: Int\n        $questions: [Json!]\n        $totalPoints: Int\n        $userInput: [Json!]\n        $quizId:String\n        $scheduleId:String\n    )\n     {\n  submitQuiz(\n    data: {\n      correctPoints:  $correctPoints\n      numberOfCorrectAnswers: $numberOfCorrectAnswers\n      numberOfIncorrectAnswers: $numberOfIncorrectAnswers\n      numberOfQuestions: $numberOfQuestions\n      questions: $questions\n      totalPoints: $totalPoints\n      userInput: $userInput\n      schedule: {\n        connect: {\n          id: $scheduleId\n        }\n      },\n      quiz: { connect: { id: $quizId } }\n    }\n  ) {\n    correctPoints\n    createdAt\n    id\n    numberOfCorrectAnswers\n    numberOfIncorrectAnswers\n    numberOfQuestions\n    questions\n    quizId\n    totalPoints\n    updatedAt\n    userId\n    userInput\n  }\n}\n"): (typeof documents)["\nmutation SubmitQuiz (\n        $correctPoints: Int\n        $numberOfCorrectAnswers: Int\n        $numberOfIncorrectAnswers: Int\n        $numberOfQuestions: Int\n        $questions: [Json!]\n        $totalPoints: Int\n        $userInput: [Json!]\n        $quizId:String\n        $scheduleId:String\n    )\n     {\n  submitQuiz(\n    data: {\n      correctPoints:  $correctPoints\n      numberOfCorrectAnswers: $numberOfCorrectAnswers\n      numberOfIncorrectAnswers: $numberOfIncorrectAnswers\n      numberOfQuestions: $numberOfQuestions\n      questions: $questions\n      totalPoints: $totalPoints\n      userInput: $userInput\n      schedule: {\n        connect: {\n          id: $scheduleId\n        }\n      },\n      quiz: { connect: { id: $quizId } }\n    }\n  ) {\n    correctPoints\n    createdAt\n    id\n    numberOfCorrectAnswers\n    numberOfIncorrectAnswers\n    numberOfQuestions\n    questions\n    quizId\n    totalPoints\n    updatedAt\n    userId\n    userInput\n  }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n            subscription CollaborationSessionUpdated ($collaborationSessionUpdated: String!) {\n        collaborationSessionUpdated(\n            collaborationSessionId: $collaborationSessionUpdated\n        ) {\n            activeDocumentId\n            chatRoomId\n            createdAt\n            id\n            updatedAt\n            activeDocument {\n                createdAt\n                fileUrl\n                id\n                isPublic\n                name\n                owner {\n                    avatarUrl\n                    bankAccountNumber\n                    bankBin\n                    banned\n                    createdAt\n                    email\n                    id\n                    name\n                    phoneNumber\n                }\n                updatedAt\n            }\n        }\n    }"): (typeof documents)["\n            subscription CollaborationSessionUpdated ($collaborationSessionUpdated: String!) {\n        collaborationSessionUpdated(\n            collaborationSessionId: $collaborationSessionUpdated\n        ) {\n            activeDocumentId\n            chatRoomId\n            createdAt\n            id\n            updatedAt\n            activeDocument {\n                createdAt\n                fileUrl\n                id\n                isPublic\n                name\n                owner {\n                    avatarUrl\n                    bankAccountNumber\n                    bankBin\n                    banned\n                    createdAt\n                    email\n                    id\n                    name\n                    phoneNumber\n                }\n                updatedAt\n            }\n        }\n    }"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery CollaborationSession ($scheduleDateId: String!) {\n    collaborationSession(scheduleDateId: $scheduleDateId) {\n        activeDocumentId\n        chatRoomId\n        createdAt\n        id\n        updatedAt\n        collaboratorsIds\n        activeDocument {\n            createdAt\n            fileUrl\n            id\n            isPublic\n            name\n            owner {\n                avatarUrl\n                bankAccountNumber\n                bankBin\n                banned\n                createdAt\n                email\n                id\n                name\n                phoneNumber\n            }\n            updatedAt\n        }\n    }\n}\n"): (typeof documents)["\nquery CollaborationSession ($scheduleDateId: String!) {\n    collaborationSession(scheduleDateId: $scheduleDateId) {\n        activeDocumentId\n        chatRoomId\n        createdAt\n        id\n        updatedAt\n        collaboratorsIds\n        activeDocument {\n            createdAt\n            fileUrl\n            id\n            isPublic\n            name\n            owner {\n                avatarUrl\n                bankAccountNumber\n                bankBin\n                banned\n                createdAt\n                email\n                id\n                name\n                phoneNumber\n            }\n            updatedAt\n        }\n    }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery Users ($name:String) {\n    users(filter: { banned: { equals: false }, email: { contains: $name } }) {\n        avatarUrl\n        email\n        id\n        name\n    }\n}\n\n"): (typeof documents)["\nquery Users ($name:String) {\n    users(filter: { banned: { equals: false }, email: { contains: $name } }) {\n        avatarUrl\n        email\n        id\n        name\n    }\n}\n\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query WorkshopMeetingRoomJoinInfo($workshopId: String!) {\n    workshopMeetingRoomJoinInfo(workshopId: $workshopId) {\n      id\n      serverUrl\n      token\n      chatRoomId\n    }\n  }\n"): (typeof documents)["\n  query WorkshopMeetingRoomJoinInfo($workshopId: String!) {\n    workshopMeetingRoomJoinInfo(workshopId: $workshopId) {\n      id\n      serverUrl\n      token\n      chatRoomId\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n          mutation EventDocumentChanged($data: DocumentDeltaInput!) {\n            eventDocumentChanged(data: $data) {\n              delta\n              documentId\n              pageIndex\n              cursor {\n                color\n                id\n                name\n                range {\n                  index\n                  length\n                }\n              }\n            }\n          }\n        "): (typeof documents)["\n          mutation EventDocumentChanged($data: DocumentDeltaInput!) {\n            eventDocumentChanged(data: $data) {\n              delta\n              documentId\n              pageIndex\n              cursor {\n                color\n                id\n                name\n                range {\n                  index\n                  length\n                }\n              }\n            }\n          }\n        "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n        subscription subscribeDocument($documentId: String!) {\n          document(documentId: $documentId) {\n            senderId\n            requestSync\n            delta\n            eventType\n            documentId\n            pageIndex\n            cursor {\n              color\n              id\n              name\n              range {\n                index\n                length\n              }\n            }\n          }\n        }\n      "): (typeof documents)["\n        subscription subscribeDocument($documentId: String!) {\n          document(documentId: $documentId) {\n            senderId\n            requestSync\n            delta\n            eventType\n            documentId\n            pageIndex\n            cursor {\n              color\n              id\n              name\n              range {\n                index\n                length\n              }\n            }\n          }\n        }\n      "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n                subscription MessageSent ($chatRoomId: String!) {\n                    messageSent(chatRoomId: $chatRoomId)  {\n                        chatRoomId\n                        content\n                        id\n                        senderId\n                        sentAt\n                        type\n                        sender {\n                            avatarUrl\n                            id\n                            name\n                        }\n                        chatRoom {\n                            mentor {\n                                avatarUrl\n                                name\n                            }\n                        }\n                    }\n                }"): (typeof documents)["\n                subscription MessageSent ($chatRoomId: String!) {\n                    messageSent(chatRoomId: $chatRoomId)  {\n                        chatRoomId\n                        content\n                        id\n                        senderId\n                        sentAt\n                        type\n                        sender {\n                            avatarUrl\n                            id\n                            name\n                        }\n                        chatRoom {\n                            mentor {\n                                avatarUrl\n                                name\n                            }\n                        }\n                    }\n                }"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query Me {\n    me {\n      avatarUrl\n      bankAccountNumber\n      bankBin\n      createdAt\n      email\n      id\n      name\n      phoneNumber\n      role\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  query Me {\n    me {\n      avatarUrl\n      bankAccountNumber\n      bankBin\n      createdAt\n      email\n      id\n      name\n      phoneNumber\n      role\n      updatedAt\n    }\n  }\n"];

export function gql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;